# -*- coding: utf-8 -*-
"""finbert apple.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VlkMKkJX-jkZp8KweHBc0ZJblumJyhKm
"""

#!/usr/bin/env python3
"""
Step 2: Analyze sentiment of Apple stock tweets using FinBERT
"""

import pandas as pd
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification

def analyze_sentiment(input_csv, output_csv):
    """
    Use FinBERT to analyze sentiment in tweets and save results to a new CSV.
    """
    print(f"Reading tweets from: {input_csv}")

    # Read the filtered tweets
    df = pd.read_csv(input_csv)
    print(f"Found {len(df)} tweets to analyze")

    print("Loading FinBERT model...")
    # Load FinBERT model and tokenizer
    model_name = "yiyanghkust/finbert-tone"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=3)

    # Initialize lists to store sentiment scores
    sentiments = []
    sentiment_labels = []

    print("Analyzing tweet sentiments...")

    # Process each tweet
    for i, tweet in enumerate(df['body']):
        # Show progress for larger datasets
        if i % 20 == 0:
            print(f"Processing tweet {i+1}/{len(df)}")

        # Tokenize the text
        inputs = tokenizer(tweet, return_tensors="pt", padding=True, truncation=True, max_length=512)

        # Get sentiment prediction
        with torch.no_grad():
            outputs = model(**inputs)
            predictions = torch.nn.functional.softmax(outputs.logits, dim=-1)

        # Get probabilities for each class
        neg_score = predictions[0, 0].item()
        neu_score = predictions[0, 1].item()
        pos_score = predictions[0, 2].item()

        # Get sentiment label
        labels = ["negative", "neutral", "positive"]
        sentiment_label = labels[torch.argmax(predictions, dim=1).item()]

        # Calculate sentiment score (-1 to 1)
        sentiment_score = pos_score - neg_score

        # Add to lists
        sentiments.append(sentiment_score)
        sentiment_labels.append(sentiment_label)

    # Add sentiment results to the dataframe
    df['sentiment_score'] = sentiments
    df['sentiment_label'] = sentiment_labels

    # Save to new CSV
    df.to_csv(output_csv, index=False)

    print(f"Sentiment analysis complete")
    print(f"Created output file: {output_csv}")

    return df

if __name__ == "__main__":
    # Change these paths to match your files
    input_csv = "apple_tweets.csv"
    output_csv = "apple_sentiment.csv"

    # Run the sentiment analysis
    analyze_sentiment(input_csv, output_csv)
    print(f"Sentiment analysis saved to {output_csv}")